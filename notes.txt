1) - Django has a built in ORM and the object is a object relational mapper 
2) - It's a bascially a system whereby it abstarcts away the complexities of interacting with the SQL database and the ORM allows 
us to basically write python code which in turn can interact with the SQL database all on its own.
3) - What happens when we have those SQL code made by python or made by Django ?
ANS: We need to do is that we need to instruct the Django framework that, hey, the migrationsthat have been made, you need to apply 
these to database so that the database typically updates the schema and knows how to interact with our application.

4) - A migration is basically the python code that we write to interact with our database.
5) - Django Admin app or django admin clay tool is a tool that is provided to us by the django package that we install and we only use 
     that to actually start or create our initial projectand after that I just switch to using the managae that profile because it contains all
     of the functionalitythat I would require from the Django admin as well as some additional feature as well.
6) - ASGI file is bascially the file that stands for Asynchronous Server gateway Interface and it allows external applications and that act as web servers 
     to basically interactwith our Django application or service.
7) - WSGI file is use when we actually deploy our application to production.
8) - We're basically going to be doing is that we are basically going to be using the manage.py clay and we're going to be using that to be 
     basically create a super user for our application.
9) - A super user in the case just means a user which has admin privileages for our application which has a role of admin and the managed.py CLA 
     tool basically has some functionality in that allows us to do that.

***********************************************************************************************************

1) - Introduction to Django apps

          (a) - python manage.py --help
          (b) - python manage.py startapp name

          AutoMax >> settings.py 
                              INSTALLED APPS 
                                             'main',

          (c) - Now, we have successfully linked our application with Django App.

2) - Working with Django Apps  

           (a) - main > views.py
                        what we're going to be doing is that we are basically creating a view which is going to be responsible 
                        for showing our let's just say main page when we navigate to our website.
                        def landing_view(request): --->> requesting a parameter
                                                         request a object that is going to be passed to the function.
                        NOW returning as a response to this view ---->>>>
                                                                         return HttpResponse("<h1>Welcome to AutoMax!</h1>")
           (b) - AutoMax > AutoMax > urls.py
           (c) - main > new file > urls.py

3) - Django Templating

           (a) - make templates folder in main folder
           (b) - then create a main folder in template folder and then create main.html file in main folder
           (c) - write html code there.
           (d) - Now in views.py 
                                GOING to pass the object after the path of the html file which will be key value 
                                pair within it 
           (e) - now going to pass this object into main.html file

     This is one of the beautiful elements of the django Templating and that is that it allows us to dynamically 
     inject data into our html and then render that

4) - Expanding main.html template

